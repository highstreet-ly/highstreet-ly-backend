using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Net.Mail;
using System.Text;
using System.Threading.Tasks;
using ChargeBee.Api;
using ChargeBee.Models.Enums;
using Highstreetly.Infrastructure;
using Highstreetly.Infrastructure.Commands;
using Highstreetly.Infrastructure.Configuration;
using Highstreetly.Infrastructure.Email;
using Highstreetly.Infrastructure.JsonApiClient;
using Highstreetly.Infrastructure.Slack;
using Highstreetly.Management.Contracts.Requests;
using Highstreetly.Permissions.Resources;
using JsonApiDotNetCore.Errors;
using MassTransit;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Weasel.Postgresql.SqlGeneration;
using Block = Highstreetly.Infrastructure.Slack.Block;
using Error = JsonApiDotNetCore.Serialization.Objects.Error;
using Subscription = ChargeBee.Models.Subscription;
using User = Highstreetly.Permissions.Resources.User;

namespace Highstreetly.Permissions.Handlers
{
    /// <summary>
    ///     TODO: we need to be throwing specific exceptions in these handlers so that
    ///     we can react appropriately in the fault handlers
    /// </summary>
    public class RegisterB2BUserHandler : IConsumer<IRegisterB2BUser>
    {
        private readonly IJsonApiClient<EventInstance, Guid> _eventInstanceClient;
        private readonly IJsonApiClient<EventSeries, Guid> _eventSeriesClient;
        private readonly ILogger<RegisterB2BUserHandler> _logger;
        private readonly UserManager<User> _userManager;
        private readonly INotificationSenderService _notificationSender;
        private readonly SlackConfiguration _slackConfiguration;
        private static readonly HttpClient HttpClient = new();

        public RegisterB2BUserHandler(
            UserManager<User> userManager,
            IJsonApiClient<EventSeries, Guid> eventSeriesClient,
            IJsonApiClient<EventInstance, Guid> eventInstanceClient,
            IConfiguration config,
            ILogger<RegisterB2BUserHandler> logger,
            INotificationSenderService notificationSender,
            SlackConfiguration slackConfiguration)
        {
            _userManager = userManager;
            _eventSeriesClient = eventSeriesClient;
            _eventInstanceClient = eventInstanceClient;
            _logger = logger;
            _notificationSender = notificationSender;
            _slackConfiguration = slackConfiguration;
            ApiConfig.Configure(config["ChargeBeeSite"], config["ChargeBeeKey"]);
        }

        public async Task Consume(
            ConsumeContext<IRegisterB2BUser> context)
        {
            using (_logger.BeginScope(new Dictionary<string, object>
            { ["CorrelationId"] = context.CorrelationId, ["SourceId"] = context.Message.SourceId }))
            {
                try
                {
                    var model = context.Message;
                    var user = await _userManager.FindByEmailAsync(model.Email);

                    if (user == null)
                    {
                        user = new User
                        {
                            Id = context.Message.SourceId,
                            FirstName = model.FirstName,
                            LastName = model.LastName,
                            UserName = model.UserName,
                            Email = model.Email,
                            NormalizedEmail = model.Email.ToUpper(),
                            AvatarType = AvatarType.AutoGenerated,
                            EmailConfirmed = true
                        };

                        var result = await _userManager.CreateAsync(user, model.Password);

                        if (!result.Succeeded)
                            throw new JsonApiException(new Error(HttpStatusCode.InternalServerError)
                            {
                                Detail = "error registering user"
                            });

                        var address = new MailAddress(model.Email);
                        var host = address.Host;

                        if (host.ToLower()
                            .Contains(Environment.GetEnvironmentVariable("A_RECORD")))
                            await _userManager.AddToRoleAsync(user, "Admin");
                    }
                    else
                    {
                        await _notificationSender.SendEmailAlreadyExistsAsync(model.Email);

                        return;
                    }

                    if (model.Onboarding)
                    {
                        var code = await _userManager.GeneratePasswordResetTokenAsync(user);
                        var callbackUrl = $"{model.Redirect}?code={WebUtility.UrlEncode(code)}&userId={user.Id}";

                        await _notificationSender.SendWelcomeEapEmail(user.Email, callbackUrl);
                    }
                    else
                    {
                        var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                        await _notificationSender.SendEmailConfirmationAsync(model.Email, user.Id.ToString(), code,
                            model.Redirect);
                    }

                    model.UserId = user.Id.ToString();


                    if (!string.IsNullOrEmpty(model.createEventName))
                    {
                        // this creates the event-organiser 
                        var es = await _eventSeriesClient.CreateAsync(new EventSeries
                        {
                            Name = model.createEventName,
                            OwnerEmail = model.Email,
                            OwnerId = model.UserId,
                            Onboarding = model.Onboarding
                        }, true);

                        var eiResult = await _eventInstanceClient.CreateAsync(new EventInstance
                        {
                            OwnerId = model.UserId,
                            Name = model.createEventName,
                            StartDate = model.createEventStartDate,
                            EndDate = model.createEventStartDate.AddDays(2),
                            EventSeriesId = es.Id,
                            EventOrganiserId = es.EventOrganiserId,
                            BusinessTypeId = model.CreateEventBusinessTypeId.GetValueOrDefault()
                        }, true);


                        if (_slackConfiguration.SlackEnabled)
                        {
                            var message = new SlackMessage
                            {
                                Text = "New User Registered!",
                                Blocks = new List<Block>
                            {
                                new Block
                                {
                                    Type = "section",
                                    Text =  new TextBlock
                                    {
                                        Text = $"<https://dashboard.{Environment.GetEnvironmentVariable("A_RECORD")}.{Environment.GetEnvironmentVariable("DOMAIN_TLD")}/u/admin/operators/{eiResult.Id}> \n :star: :sparkles: \n A new organisation has registered. :sparkles: :star:",
                                        Type = "mrkdwn"
                                    },
                                    BlockId = "section234234",
                                    Accessory = new Accessory
                                    {
                                        Type = "image",
                                        AltText = "YESSS!!!",
                                        ImageUrl = "https://s3.memeshappen.com/memes/Yesssss-.jpg"
                                    }
                                }
                            }
                            };

                            var serializeObject = JsonConvert.SerializeObject(message, new JsonSerializerSettings
                            {
                                NullValueHandling = NullValueHandling.Ignore
                            });

                            var stringContent = new StringContent(serializeObject, Encoding.UTF8, "application/json");




                            var result = await HttpClient.PostAsync(
                                 new Uri("https://hooks.slack.com/services/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"),
                                 stringContent);

                            var response = await result.Content.ReadAsStringAsync();
                        }


                    }

                    // create the charge bee sub:
                    var now = ApiUtil.ConvertToTimestamp(DateTime.UtcNow);

                    await Subscription.Create()
                        .PlanId("starter-plan")
                        .AutoCollection(AutoCollectionEnum.Off)
                        .StartDate(now ?? default)
                        .TrialEnd(0)
                        .CustomerFirstName(model.Email)
                        .CustomerEmail(model.Email)
                        .RequestAsync();



                }
                catch (Exception e)
                {
                    _logger.LogError(e.ToString());
                    throw;
                }
            }
        }
    }
}